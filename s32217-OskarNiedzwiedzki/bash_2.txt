Ćwiczenie 1:

1.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    if [ $# -le 1 ]; then
        echo "Not enough arguments!"
        exit 0
    fi

    echo First argument: $1

<------------------------------------------------------------------------------------------------------------------------>

2.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    if [ -a "./config.cfg" ]; then
            ./config.cfg
            exit 0
    elif [ $# -ge 1 ]; then
            if [ -a ./$1 ]; then
                    ./$1
                    exit 0
            else
                    echo "Given file does not exist!"
                    exit 0
            fi
    else
            echo "Error - config.cfg does not exist, file was not specified"
    fi


<------------------------------------------------------------------------------------------------------------------------>

3.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    pattern='\.sh$'
    [[ $0 =~ $pattern ]] || mv $0 "$0.sh"

<------------------------------------------------------------------------------------------------------------------------>

4.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    #mialo byc w nietypowy sposob, wiec jest
    str=$(tree . | tail -n 1 | tr -d '[:alpha:][,]')
    dircount=$(echo "$str" | cut -d' ' -f1)
    filecount=$(echo "$str" | cut -d' ' -f3)

    if [ "$((dircount+filecount))" -gt 5 ]; then
            echo "Directory contains more than 5 files"
    else
            echo "Directory contains less than 5 files"
    fi

<------------------------------------------------------------------------------------------------------------------------>

Ćwiczenie 2:

1.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    for i in $(seq 10 -2 1); do
            echo $i
    done

<------------------------------------------------------------------------------------------------------------------------>

2.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    args=("$@")
    for str in "${args[@]}"; do
            echo $str
    done

<------------------------------------------------------------------------------------------------------------------------>

3.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    for file in *; do
            echo "Patrzcie Państwo, oto plik: $file"
    done

    #nie wiem gdzie tutaj mam zastosowac ten IFS, a nie chce go wciskac nigdzie na sile

<------------------------------------------------------------------------------------------------------------------------>

4.
<------------------------------------------------------------------------------------------------------------------------>

    #!/bin/bash

    pattern='\.c$'
    for file in *; do
            if [ -f $file ] && [[ $file =~ $pattern ]]; then
                    cc $file -o "$(basename $file .c)"
            fi
    done

<------------------------------------------------------------------------------------------------------------------------>


5.
<------------------------------------------------------------------------------------------------------------------------>

#!/bin/bash

args=("$@")

for str in "${args[@]}"; do
    if [ -f "$str" ]; then
        printf "Forward Read: \n"

        lines=()
        while read -r str; do
            echo "$str"
            lines+=("$str")
        done < "$str"

        printf "Backward Read: \n"
        for (( i=${#lines[@]}-1; i>=0; i--)) do
            echo "${lines[$i]}" | rev
        done

    fi
    
done

<------------------------------------------------------------------------------------------------------------------------>

Ćwiczenie 3:

1.
<------------------------------------------------------------------------------------------------------------------------>

#!/bin/bash

function color_text {
  if [ $# -ne 2 ]; then
    printf "Text and color arguments are required!"
    return
  fi

  color="$1"
  text="$2"
  color_code="\\e[32m"

  case "$color" in
    "red")
        color_code="\\e[31m"
    ;;
    "green")
        color_code="\\e[32m"
    ;;
        "yellow")
        color_code="\\e[33m"
    ;;
        "blue")
        color_code="\\e[34m"
    ;;
    *)
        color_code="\\e[31m" #set to red by default
    ;;
  esac

  echo -e "${color_code}${text}\\e[0m"

}

if [ $# -ne 2 ]; then
    printf "Text and color arguments are required!"
    exit
fi

color_text "$1" "$2"

<------------------------------------------------------------------------------------------------------------------------>

2.
<------------------------------------------------------------------------------------------------------------------------>

#!/bin/bash

if [ $# -lt 1 ]; then
    echo "Not enough arguments!"
    exit
fi

if [ $(($1)) -le 0 ]; then
    echo "Input is not an integer, or is string!"
    exit
fi

function fibonacci {
    if [[ $1 -eq 1 || $1 -eq 2 ]]; then
        return 1
    fi

    fibonacci $(($1-1))
    local n1=$?
    fibonacci $(($1-2))
    local n2=$?

    return $((n1+n2))
}

fibonacci $1

<------------------------------------------------------------------------------------------------------------------------>

3.
To należy umieścić w naszym pliku .bashrc

if [ -f /home/PJWSTK/sxxxxx/command-comp.sh ]; then
   . /home/PJWSTK/sxxxxx/command-comp.sh
fi

<------------------------------------------------------------------------------------------------------------------------>

_wget_completion() {
    local cur prev
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    options="google.com pja.edu.pl/pjatk/ https://sites.google.com/pjwstk.edu.pl/t0meck-sop"

    case "${prev}" in
        wget)
            COMPREPLY=( $(compgen -W "${options}" -- ${cur}) )
            return 0
            ;;
        *)
            ;;
    esac
}

complete -F _wget_completion wget

<------------------------------------------------------------------------------------------------------------------------>

Zadanie domowe:

<------------------------------------------------------------------------------------------------------------------------>

#!/bin/bash

if [ $# != 1 ]; then
   echo "Not enough arguments"
   exit 0
fi

if [[ $1 =~ ^[A-Z][a-z]* ]]; then
    echo "This is Polish name"
elif [[ $1 =~ ^[0-9]{2}-[0-9]{3}$ ]]; then                        # ^ i $ na koncu sprawia, ze kazdy kod typu xx-xxx przechodzi, ale xxx-xxx juz nie
    echo "This is postal code"
elif [[ $1 =~ [A-Za-z0-9._%+-]+@[A-Za-z0-9]+\.[a-z]{2,} ]]; then  #zeby nie bylo ze nie rozumiem
    echo "This is an email"                                       #[]+ -> matchuje wszystkie literki i inne symbole 1 lub wiecej razy az napotka malpe
else                                                              #potem wczytuje sobie nazwe domeny, wymaga kropki, na koniec jakies .pl, .com
    echo "I do not reckognize this!"
fi

<------------------------------------------------------------------------------------------------------------------------>